package com.ptstore.models;
// Generated Dec 23, 2020 3:53:44 PM by Hibernate Tools 5.1.7.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotEmpty;
import javax.validation.constraints.NotNull;

import org.springframework.format.annotation.DateTimeFormat;


/**
 * Product generated by hbm2java
 */
@Entity
@Table(name = "product", catalog = "dbterm4")
public class Product implements java.io.Serializable {

	private Integer id;
	private Account account;
	private Brand brand;
	private Category category;
	@NotEmpty
	private String name;
	private String photo;
	@NotNull
	private int quantity;
	@NotNull
	private double unitPrice;
	private String unitBrief;
	@NotEmpty
	private String description;
	private boolean special;
	@NotNull
	private double discount;
	private boolean activated;
	private boolean status;
	@DateTimeFormat(pattern="MM/dd/yyyy")
	@Temporal(TemporalType.DATE)
	private Date created;
	private Set<Orderdetails> orderdetailses = new HashSet<Orderdetails>(0);
	private Set<Rate> rates = new HashSet<Rate>(0);

	public Product() {
	}

	public Product(Account account, Brand brand, Category category, String name, String photo, int quantity,
			double unitPrice, String unitBrief, String description, boolean special, double discount, boolean activated,
			boolean status, Date created) {
		this.account = account;
		this.brand = brand;
		this.category = category;
		this.name = name;
		this.photo = photo;
		this.quantity = quantity;
		this.unitPrice = unitPrice;
		this.unitBrief = unitBrief;
		this.description = description;
		this.special = special;
		this.discount = discount;
		this.activated = activated;
		this.status = status;
		this.created = created;
	}

	public Product(Account account, Brand brand, Category category, String name, String photo, int quantity,
			double unitPrice, String unitBrief, String description, boolean special, double discount, boolean activated,
			boolean status, Date created, Set<Orderdetails> orderdetailses, Set<Rate> rates) {
		this.account = account;
		this.brand = brand;
		this.category = category;
		this.name = name;
		this.photo = photo;
		this.quantity = quantity;
		this.unitPrice = unitPrice;
		this.unitBrief = unitBrief;
		this.description = description;
		this.special = special;
		this.discount = discount;
		this.activated = activated;
		this.status = status;
		this.created = created;
		this.orderdetailses = orderdetailses;
		this.rates = rates;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "accountId", nullable = false)
	public Account getAccount() {
		return this.account;
	}

	public void setAccount(Account account) {
		this.account = account;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "brandId", nullable = false)
	public Brand getBrand() {
		return this.brand;
	}

	public void setBrand(Brand brand) {
		this.brand = brand;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "categoryId", nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@Column(name = "name", nullable = false, length = 150)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "photo", nullable = false, length = 250)
	public String getPhoto() {
		return this.photo;
	}

	public void setPhoto(String photo) {
		this.photo = photo;
	}

	@Column(name = "quantity", nullable = false)
	public int getQuantity() {
		return this.quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	@Column(name = "unitPrice", nullable = false, precision = 22, scale = 0)
	public double getUnitPrice() {
		return this.unitPrice;
	}

	public void setUnitPrice(double unitPrice) {
		this.unitPrice = unitPrice;
	}

	@Column(name = "unitBrief", nullable = false, length = 50)
	public String getUnitBrief() {
		return this.unitBrief;
	}

	public void setUnitBrief(String unitBrief) {
		this.unitBrief = unitBrief;
	}

	@Column(name = "description", nullable = false, length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "special", nullable = false)
	public boolean isSpecial() {
		return this.special;
	}

	public void setSpecial(boolean special) {
		this.special = special;
	}

	@Column(name = "discount", nullable = false, precision = 22, scale = 0)
	public double getDiscount() {
		return this.discount;
	}

	public void setDiscount(double discount) {
		this.discount = discount;
	}

	@Column(name = "activated", nullable = false)
	public boolean isActivated() {
		return this.activated;
	}

	public void setActivated(boolean activated) {
		this.activated = activated;
	}

	@Column(name = "status", nullable = false)
	public boolean isStatus() {
		return this.status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "created", nullable = false, length = 10)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Orderdetails> getOrderdetailses() {
		return this.orderdetailses;
	}

	public void setOrderdetailses(Set<Orderdetails> orderdetailses) {
		this.orderdetailses = orderdetailses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "product")
	public Set<Rate> getRates() {
		return this.rates;
	}

	public void setRates(Set<Rate> rates) {
		this.rates = rates;
	}

}
